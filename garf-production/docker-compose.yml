version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: garf-postgres
    environment:
      POSTGRES_USER: garf
      POSTGRES_PASSWORD: garf_password
      POSTGRES_DB: garf_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/database_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U garf"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - garf-network

  # Redis for background tasks
  redis:
    image: redis:7-alpine
    container_name: garf-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - garf-network

  # FastAPI Backend
  api:
    build:
      context: ..
      dockerfile: garf-production/api/Dockerfile
    container_name: garf-api
    environment:
      DATABASE_URL: postgresql://garf:garf_password@postgres:5432/garf_db
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here-change-in-production}
      DEBUG: ${DEBUG:-true}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - garf-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # RQ Worker for background tasks
  worker:
    build:
      context: ..
      dockerfile: garf-production/worker/Dockerfile
    container_name: garf-worker
    environment:
      DATABASE_URL: postgresql://garf:garf_password@postgres:5432/garf_db
      REDIS_URL: redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - garf-network
    command: rq worker --url redis://redis:6379/0

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: garf-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000/api/v1
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - garf-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: garf-nginx
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infra/nginx/sites:/etc/nginx/sites-enabled:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - frontend
    networks:
      - garf-network

  # pgAdmin for database management (optional, development only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: garf-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@garf.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - garf-network
    profiles:
      - dev

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:

networks:
  garf-network:
    driver: bridge

